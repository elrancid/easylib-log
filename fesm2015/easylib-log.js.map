{"version":3,"file":"easylib-log.js","sources":["../../../projects/easylib/log/src/lib/logger.ts","../../../projects/easylib/log/src/lib/log.service.ts","../../../projects/easylib/log/src/lib/loggable.ts","../../../projects/easylib/log/src/lib/loggable.component.ts","../../../projects/easylib/log/src/lib/log.module.ts","../../../../projects/easylib/log/src/public-api.ts","../../../../projects/easylib/log/src/easylib-log.ts"],"sourcesContent":["// import { Directive } from '@angular/core';\nimport * as moment from 'moment';\nimport { Util } from '@easylib/util';\n\n/**\n * Use `Logger` static methods to log to console.\n */\n// @Directive()\nexport class Logger {\n\n  static trace(...params: any): void {\n    Logger.callLog('trace', ...params);\n  }\n  static log(...params: any): void {\n    Logger.callLog('log', ...params);\n  }\n  static warn(...params: any): void {\n    Logger.callLog('warn', ...params);\n  }\n  static error(...params: any): void {\n    Logger.callLog('error', ...params);\n  }\n\n  static traceIf(...params: any): void {\n    Logger.callLogIf('trace', ...params);\n  }\n  static logIf(...params: any): void {\n    Logger.callLogIf('log', ...params);\n  }\n  static warnIf(...params: any): void {\n    Logger.callLogIf('warn', ...params);\n  }\n  static errorIf(...params: any): void {\n    Logger.callLogIf('error', ...params);\n  }\n\n  private static callLogIf(logLevel: string, ...params: any): void {\n    const firstElement = params.shift();\n    // console.log('callLogIf() logLevel:', logLevel, 'params:', params, 'obj:', obj);\n    if (\n      (Util.isObject(firstElement) &&\n      firstElement.hasOwnProperty('logs') &&\n      (firstElement as any).logs === true)\n      || firstElement === true\n    ) {\n      Logger.callLog(logLevel, ...params);\n    }\n  }\n\n  private static callLog(logLevel: string, ...params: any): void {\n    // console.log('callLog() logLevel:', logLevel, 'params1:', JSON.parse(JSON.stringify(params)), 'params:', params);\n    // console.log('callLog()... params[' + (typeof params) + '|' + params.length + ']:', params);\n    // params.unshift('[' + moment().format('YYYY-MM-DD HH:mm:ss.SSS') + '][' + Logger.getCallerName() + ']');\n    params.unshift('\\x1b[34m%s\\x1b[32m%s\\x1b[0m', moment().format('HH:mm:ss.SSS') + ' ', Logger.getCallerName() + ':');\n    let consoleMethod;\n    switch (logLevel) {\n      // tslint:disable-next-line: no-console\n      case 'trace': consoleMethod = console.trace; break;\n      case 'log': consoleMethod = console.log; break;\n      case 'warn': consoleMethod = console.warn; break;\n      case 'error': consoleMethod = console.error; break;\n    }\n    if (consoleMethod) {\n      consoleMethod.apply(Logger, params);\n    }\n\n  }\n\n  private static getCallerName(depth: number = 5): string {\n    const stack = new Error().stack;\n    if (stack) {\n      // console.log('stack:', stack);\n      const stackArr = stack.split('\\n', depth + 2);\n      // console.log('stackArr:', stackArr);\n      let rowStackArr = stackArr[depth - 1].split('at ', 2);\n      // console.log('rowStackArr[1]:', rowStackArr[1]);\n      if (rowStackArr[1].search(/^[\\w\\d]+.log(If)? \\([\\w]/) === 0) {\n        rowStackArr = stackArr[depth].split('at ', 2);\n      }\n      // console.log('rowStackArr[1]:', rowStackArr[1]);\n      if (rowStackArr[1].search(/^[\\w\\d]+.log(If)? \\([\\w]/) === 0) {\n        rowStackArr = stackArr[depth + 1].split('at ', 2);\n      }\n      // console.log('rowStackArr[1]:', rowStackArr[1]);\n      return rowStackArr.length > 1 ? rowStackArr[1] : rowStackArr[0].trim();\n    }\n    else {\n      return '';\n    }\n\n    // const stackArr = stack.split('\\n', depth + 2);\n    // // console.log('stackArr:', stackArr);\n    // let re = /([^(]+)@|at ([^(]+) \\(/g;\n    // // console.log('stackArr[depth + 1]:', stackArr[depth + 1]);\n    // let aRegexResult = re.exec(stackArr[depth + 1]);\n    // // console.log('aRegexResult:', aRegexResult);\n    // if (!aRegexResult) {\n    //   re = /([^(]+)@|at ([^(]+)/g;\n    //   // console.log('********** stackArr[depth + 1]:', stackArr[depth + 1]);\n    //   aRegexResult = re.exec(stackArr[depth + 1]);\n    //   // console.log('********** aRegexResult:', aRegexResult);\n    // }\n    // return aRegexResult[1] || aRegexResult[2];\n\n    // try {\n    //   throw new Error();\n    // } catch (e) {\n    //   // const re = /(\\w+)@|at (\\w+) \\(/g;\n    //   const stack = e.stack;\n    //   const stackArr = stack.split('\\n', 3);\n    //   const result = /(\\w+)@|at ([\\w\\d\\s]+) \\(/g.exec(stackArr[2]);\n    //   console.log('stack[' + (typeof stack) + ']:', stack);\n    //   console.log('stackArr[' + (typeof stackArr) + ']:', stackArr);\n    //   console.log('result[' + (typeof result) + ']:', result);\n    //   console.log('result[' + (typeof result) + ']:', result);\n    //   console.log('callerName:', result[2]);\n    // }\n    // console.log('callerName:', callerName);\n\n    // {\n    //   const stack = new Error().stack;\n    //   console.log('stack:', stack);\n    //   const stackArr = stack.split('\\n', 3);\n    //   console.log('stackArr:', stackArr);\n    //   const re = /([^(]+)@|at ([^(]+) \\(/g;\n    //   const aRegexResult = re.exec(stackArr[2]);\n    //   callerName = aRegexResult[1] || aRegexResult[2];\n    // }\n    // console.log('callerName:', callerName);\n\n    // Logger.logs.push(message);\n    // console.log(message);\n    // Add each number to the total\n    // console.log('log()... params[' + params.length + ']:', params)\n    // let i = 0;\n    // for (const arg of arguments) {\n    //   console.log('argument[' + i + ']:', arg);\n    //   i++;\n    // }\n    // console.log.call(arguments);\n\n    // console.log('arguments.callee.caller:', arguments.callee.caller);\n    // console.log('arguments.callee.caller.name:', arguments.callee.caller.name);\n    // console.log('args.callee.caller:', args.callee.caller);\n    // console.log('log.caller:', Logger.log.caller);\n    // console.log('log.caller.name:', Logger.log.caller.name);\n\n  }\n}\n\n/**\n * For color see: http://voidcanvas.com/make-console-log-output-colorful-and-stylish-in-browser-node/\n * @param logLevel trace | log | warn | error\n * @param params strings or object to log\n */\n// private callLog(logLevel: string, ...params: any): void {\n//   // console.log('callLog()... params[' + (typeof params) + '|' + params.length + ']:', params);\n//   params.unshift('[' + moment().format('YYYY-MM-DD HH:mm:ss.SSS') + '][' + this.getCallerName(3) + ']');\n//   console[logLevel].apply(this, params);\n// }\n// private callLogIf(logLevel: string, ...params: any): void {\n//   if (this.logs) {\n//     params.unshift('\\x1b[34m%s\\x1b[32m%s\\x1b[0m', moment().format('HH:mm:ss.SSS') + ' ', this.getCallerName(3) + ':');\n//     console[logLevel].apply(this, params);\n//   }\n// }\n\n// private getCallerName(depth: number = 3): string {\n//   const stack = new Error().stack;\n//   // console.log('stack:', stack);\n//   const stackArr = stack.split('\\n', depth + 2);\n//   const rowStackArr = stackArr[depth + 1].split('at ', 2);\n//   return rowStackArr.length > 1 ? rowStackArr[1] : rowStackArr[0].trim();\n// }\n\n// console.log('stackArr:', stackArr);\n// let re = /([^(]+)@|at ([^(]+) \\(/g;\n// // console.log('stackArr[depth + 1]:', stackArr[depth + 1]);\n// let aRegexResult = re.exec(stackArr[depth + 1]);\n// // console.log('aRegexResult:', aRegexResult);\n// if (!aRegexResult) {\n//   re = /([^(]+)@|at ([^(]+)/g;\n//   // console.log('********** stackArr[depth + 1]:', stackArr[depth + 1]);\n//   aRegexResult = re.exec(stackArr[depth + 1]);\n//   // console.log('********** aRegexResult:', aRegexResult);\n// }\n// return aRegexResult[1] || aRegexResult[2];\n\n// trace(...params: any): void {\n//   this.callLog('trace', ...params);\n// }\n// traceIf(...params: any): void {\n//   this.callLogIf('trace', ...params);\n// }\n// log(...params: any): void {\n//   this.callLog('log', ...params);\n// }\n// logIf(...params: any): void {\n//   this.callLogIf('log', ...params);\n// }\n// warn(...params: any): void {\n//   this.callLog('warn', ...params);\n// }\n// warnIf(...params: any): void {\n//   this.callLogIf('warn', ...params);\n// }\n// error(...params: any): void {\n//   this.callLog('error', ...params);\n// }\n// errorIf(...params: any): void {\n//   this.callLogIf('error', ...params);\n// }\n\n// private callLogIf(logLevel: string, ...params: any) {\n//   const obj = params.shift();\n//   // console.log('callLogIf()... obj:', obj, 'obj.logs:', obj.logs);\n//   // if (_.isObject(obj) && obj.logs) {\n//   if (this.logs) {\n//     // console.log('callLog()... params[' + (typeof params) + '|' + params.length + ']:', params);\n//     params.unshift('[' + moment().format('YYYY-MM-DD HH:mm:ss.SSS') + '][' + this.getCallerName() + ']');\n//     console[logLevel].apply(this, params);\n//   }\n// }\n\n// console.trace\n// console.debug\n// console.log\n// console.info\n// console.warn\n// console.error\n// console.table\n\n// const label = 'Adolescent Irradiated Espionage Tortoises';\n// console.group(label);\n// console.info('Leo');\n// console.info('Mike');\n// console.info('Don');\n// console.info('Raph');\n// console.groupEnd(label);\n\n// const spacing = '5px';\n// const styles = `padding: ${spacing}; background-color: darkblue; color: white; font-style:\n// italic; border: ${spacing} solid crimson; font-size: 2em;`;\n// console.log('%cVariety is the spice of life', styles);\n\n// console.time(\"answer time\");\n// alert(\"Click to continue\");\n// console.timeLog(\"answer time\");\n// alert(\"Do a bunch of other stuff...\");\n// console.timeEnd(\"answer time\");\n","import { Injectable } from '@angular/core';\n// import { CoreModule } from '../core.module';\nimport { Logger } from './logger';\n\n/**\n * Use `LogService` to log to console.\n */\n@Injectable({\n  providedIn: 'root',\n  // providedIn: CoreModule,\n  // providedIn: 'any',\n})\nexport class LogService {\n\n  constructor() {\n    // this.log('*** LogService constructor');\n  }\n\n  trace(...params: any): void {\n    Logger.trace(...params);\n  }\n  log(...params: any): void {\n    Logger.log(...params);\n  }\n  warn(...params: any): void {\n    Logger.warn(...params);\n  }\n  error(...params: any): void {\n    Logger.error(...params);\n  }\n\n  traceIf(...params: any): void {\n    Logger.traceIf(...params);\n  }\n  logIf(...params: any): void {\n    Logger.logIf(...params);\n  }\n  warnIf(...params: any): void {\n    Logger.warnIf(...params);\n  }\n  errorIf(...params: any): void {\n    Logger.errorIf(...params);\n  }\n}\n","import { Logger } from './logger';\n\n/**\n * Extend `Loggable` in components and set boolean `logs` property\n * to enable logs. Use `this.log()` and the other methods to print to console\n * if `logs` is `true`.\n */\nexport abstract class Loggable {\n\n  public logs = false;\n\n  // constructor(private Logger: LoggerService) {\n  constructor() {\n    this.log('Loggable constructor');\n  }\n\n  trace(...params: any): void {\n    if (this.logs) {\n      Logger.trace(...params);\n    }\n  }\n  log(...params: any): void {\n    if (this.logs) {\n      Logger.log(...params);\n    }\n  }\n  warn(...params: any): void {\n    if (this.logs) {\n      Logger.warn(...params);\n    }\n  }\n  error(...params: any): void {\n    if (this.logs) {\n      Logger.error(...params);\n    }\n  }\n\n  traceIf(...params: any): void {\n    Logger.traceIf(...params);\n  }\n  logIf(...params: any): void {\n    Logger.logIf(...params);\n  }\n  warnIf(...params: any): void {\n    Logger.warnIf(...params);\n  }\n  errorIf(...params: any): void {\n    Logger.errorIf(...params);\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Loggable } from './loggable';\n\n/**\n * Extend `Loggable` in components and set boolean `logs` property\n * to enable logs. Use `this.log()` and the other methods to print to console\n * if `logs` is `true`.\n */\n@Component({\n  template: '',\n})\nexport class LoggableComponent extends Loggable {\n\n  @Input() logs = false;\n\n  constructor() {\n    super();\n  }\n\n  // trace(...params: any): void {\n  //   if (this.logs) {\n  //     Logger.trace(...params);\n  //   }\n  // }\n  // log(...params: any): void {\n  //   if (this.logs) {\n  //     Logger.log(...params);\n  //   }\n  // }\n  // warn(...params: any): void {\n  //   if (this.logs) {\n  //     Logger.warn(...params);\n  //   }\n  // }\n  // error(...params: any): void {\n  //   if (this.logs) {\n  //     Logger.error(...params);\n  //   }\n  // }\n}\n","import { NgModule } from '@angular/core';\nimport { LoggableComponent } from './loggable.component';\n\n\n\n@NgModule({\n  declarations: [LoggableComponent],\n  imports: [\n  ],\n  exports: [LoggableComponent]\n})\nexport class LogModule { }\n","/*\n * Public API Surface of log\n */\n\nexport * from './lib/logger';\nexport * from './lib/log.service';\nexport * from './lib/loggable.component';\nexport * from './lib/log.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {Loggable as ɵa} from './lib/loggable';"],"names":[],"mappings":"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"}